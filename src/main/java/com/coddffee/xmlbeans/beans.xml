<?xml version="1.0" encoding="UTF-8"?>

<!--
必须引入springframework.spring和springframework.spring-context两个依赖。
使用 <import resources="otherBeans.xml"/> 可引用外部beans文件。
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
    注解配置与XML配置的优缺点：
    注解配置更加简单方便，但会入侵POJO源码。
    XML配置比较繁琐，但不会触及POJO源代码。
    -->

    <!-- **********bean的作用域(scope属性)********** -->
    <!--
    singleton : 单例模式，默认值
    prototype : 原型模式，每次调用getBean()方法就会创建一个新的实例
    request : 每次HTTP请求就会创建一个新的实例
    session : 每次创建一个新的会话就会创建一个新的实例
    application : 一个ServletContext生命周期中使用一个bean实例
    websocket : 一个WebSocket生命周期中使用一个bean实例
    -->

    <!-- **********bean的实例化********** -->
    <!--
    实例化bean的方式有：
    构造器实例化
    静态工厂实例化
    实例工厂实例化
    -->

    <!-- 构造器方式实例化 -->
    <!-- bean为配置id或name时，使用全类名作为bean的name -->
    <bean id="employee1" class="com.coddffee.xmlbeans.Employee">
        <property name="id" value="1"/>
        <!-- setter注入，调用属性的set方法 -->
        <property name="name" value="Tony"/>
        <!-- 引用bean的id进行注入 -->
        <property name="group" ref="group1"/>
    </bean>
    <bean id="group1" class="com.coddffee.xmlbeans.Group">
        <property name="name" value="development"/>
    </bean>

    <!-- 静态工厂实例化bean -->
    <bean id="employee2" class="com.coddffee.xmlbeans.Employee" factory-method="fake"/>

    <bean id="exEmployee" class="com.coddffee.xmlbeans.Employee"/>

    <!-- 实例工厂实例化bean -->
    <bean id="dismissedEmployee" factory-bean="exEmployee" factory-method="afterDismissed"/>

    <!-- **********依赖注入(DI)********** -->
    <!--
    依赖注入的方式有：
    构造器注入
    setter注入
    自动装配
    方法注入：查找方法注入(lookup-method),
    -->

    <!-- 构造器注入 -->
    <bean id="employee3" class="com.coddffee.xmlbeans.Employee">
        <!--
        其它的构造器参数匹配方式：
        根据参数类型匹配：<constructor-arg type="java.lang.String" value="Sunny"/>
        根据参数索引匹配：<constructor-arg index="2" ref="group1"/>
         -->
        <constructor-arg name="id" value="3"/>
        <constructor-arg name="name" value="Sunny"/>
        <constructor-arg name="group" ref="group1"/>
    </bean>

    <!-- 内部bean: 在bean的内部定义bean用于配置外部bean的属性 -->
    <bean id="employee4" class="com.coddffee.xmlbeans.Employee">
        <property name="id" value="4"/>
        <property name="name" value="Tom"/>
        <property name="group">
            <bean class="com.coddffee.xmlbeans.Group">
                <property name="name" value="Test"/>
                <property name="department">
                    <bean class="com.coddffee.xmlbeans.Department">
                        <property name="name" value="software"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- 集合属性注入 -->
    <bean id="group2" class="com.coddffee.xmlbeans.Group">
        <property name="name" value="development"/>
        <property name="employees">
            <!--
            Property的注入方式：
            <property name="properties">
                <props>
                    <prop key="..." value="..."/>
                    <prop key="..." value="..."/>
                    ...
                </props>
            </property>
            Map的注入方式：
            <property name="map">
                <map>
                    <entry key="..." value="..."/>
                    <entry key="..." value="..."/>
                    ...
                </map>
            </property>
            -->
            <list>
                <ref bean="employee1"/>
                <ref bean="employee2"/>
                <ref bean="employee3"/>
            </list>
        </property>
    </bean>

    <!-- p-namespace -->
    <!--
    使用p-namespace必须引用添加文档命名空间：xmlns:p="http://www.springframework.org/schema/p"
    p-namespace用于简化setter注入
    p:propertyName="value" 等价于 <property name="propertyName" value="value"/>
    p:propertyName-ref="bean" 等价于 <property name="propertyName" ref="bean"/>
    -->
    <bean id="employee5" class="com.coddffee.xmlbeans.Employee"
          p:id="5"
          p:name="Luis"
          p:group-ref="group1"/>

    <!-- c-namespace -->
    <!--
    使用c-namespace必须引用添加文档命名空间：xmlns:c="http://www.springframework.org/schema/c"
    c-namespace用于简化构造器注入
    c:paramName="value" 等价于 <constructor-arg name="paramName" value="value"/>
    c:paramName-ref="bean" 等价于 <constructor-arg name="paramName" ref="bean"/>
    c:_0="value" 等价于 <constructor-arg index="0" value="value"/>
    c:_1-ref="bean" 等价于 <constructor-arg index="1" ref="bean"/>
    -->
    <bean id="employee6" class="com.coddffee.xmlbeans.Employee"
          c:id="6"
          c:name="Aux"
          c:group-ref="group2"/>

    <!-- 复合属性 -->
    <bean id="group3" class="com.coddffee.xmlbeans.Group">
        <property name="name" value="planning"/>
        <!-- 构造器实例化bean -->
        <property name="department">
            <bean class="com.coddffee.xmlbeans.Department"/>
        </property>
        <!-- 复合属性，使用前提是目标属性已经被实例化 -->
        <property name="department.name" value="software"/>
    </bean>

    <!-- depends-on: 指定某个bean依赖于另一个bean -->
    <bean id="employee7" class="com.coddffee.xmlbeans.Employee" depends-on="group3">
        <property name="id" value="7"/>
        <property name="name" value="Winter"/>
        <property name="group" ref="group3"/>
    </bean>

    <!-- 延迟初始化的bean -->
    <!--
    默认情况下ApplicationContext启动时会立即初始化bean, 延迟初始化使得容器在bean被第一次请求时进行初始化
    在<beans>标签中设置default-lazy-init为true或false后，将影响其中所有设置lazy-init="default"的bean
    -->
    <bean id="xxx" class="com.coddffee.xmlbeans.Employee" lazy-init="true"/>

    <!-- 自动装配 -->
    <!--
    byName : 如果IoC容器中有一个bean的id或name与目标bean某个属性名相同则自动装配
    byType : 如果IoC容器中有一个bean的类型与目标bean某个属性类型相同则自动装配
    constructor : 根据bean类的构造器自动装配
    no : 不自动装配，默认配置
    default : 默认(no)
    -->

    <bean id="department" class="com.coddffee.xmlbeans.Department">
        <property name="name" value="marketing"/>
    </bean>
    <!-- 上面名为department的bean可与department属性自动装配 -->
    <!--
    如果存在多个自动装配bean选择，可将非目标bean的autowire-candidate(自动装配候选)属性设置为false
    更好的选择是将目标候选bean的primary属性设置为true
     -->
    <bean id="group4" class="com.coddffee.xmlbeans.Group" autowire="byName" primary="true">
        <property name="name" value="sales"/>
    </bean>
    <bean id="employee8" class="com.coddffee.xmlbeans.Employee" autowire="byType">
        <property name="id" value="8"/>
        <property name="name" value="Jarvis"/>
    </bean>

    <!-- 集合合并 -->

</beans>